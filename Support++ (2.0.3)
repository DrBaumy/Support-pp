/*
Copyright (C) 2017 VerHext <support@allesverhext.de>

This work is licensed under the Creative Commons

Attribution-NonCommercial-ShareAlike 4.0

International License. To view a copy of this license,
visit http://creativecommons.org/licenses/by-nc-sa/4.0/.
*/
registerPlugin({

    name: 'Support++',
    version: '2.0.3 BETA',
    description: 'Advanced support script + ticket system + e-mail notification + channel rename',
    author: 'VerHext <support@allesverhext.de>',
    engines: '>= 0.9.16',

    vars: [{
            name: 'spWelcome',
            title: 'Welcome to the configuration of Support (v2). \n Thank you for choosing this script. \n\nPlease fill out all fields with (*), as these are relevant. \n\nIf you find a bug, then report it to the forum. \n\nI wish you much fun with Support ++'
        }, {
            name: 'spLanguage',
            title: 'Select the language DE/EN',
            type: 'select',
            options: ['Deutsch', 'English']
        }, {
            name: 'spSorryGermanNot',
            indent: 2,
            title: 'Sorry :/ but German is not available.',
            conditions: [{
                field: 'spLanguage',
                value: 0
            }, ]
        }, {
            name: 'spSupportChannels',
            indent: 2,
            title: 'Support Channels (*)',
            type: 'array',
            vars: [{
                name: 'spSupportChannel',
                indent: 1,
                title: 'Select the support channel that users enter when they need support (*)',
                type: 'channel'
            }, {
                name: 'spSupporterId',
                indent: 1,
                title: 'Supporter servergroup ID (*)',
                type: 'strings'
            }, {
                name: 'spSupportUserMessage',
                indent: 1,
                title: 'Message when a user joins (*)',
                placeholder: 'Hello &u, please wait. A supporter was informed [Variable &u = Username]',
                type: 'string'
            }, {
                name: 'spSupportMessage',
                indent: 1,
                title: 'Message to the supporter if a user needs help [Variable &u = Username] (*)',
                placeholder: 'User &u needs support!',
                type: 'string'
            }],
            conditions: [{
                field: 'spLanguage',
                value: 1
            }],
        }, {
            name: 'spIgnoreId',
            indent: 2,
            title: 'Ignore servergroup ID (*)',
            type: 'strings',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }]
        }, {
            name: 'spAfkChannels',
            indent: 2,
            title: 'AFK Channels - ignore Supporter... (*)',
            type: 'array',
            vars: [{
                name: 'spAfkChannel',
                title: 'AFK Channel ignore Supporters. (*)',
                type: 'channel'
            }],
            conditions: [{
                field: 'spLanguage',
                value: 1
            }]

        }, {
            name: 'spSupportUserNoMessage',
            indent: 2,
            title: 'Response when there\'s no supporter online [Variable &u = Username] (*)',
            placeholder: 'Sorry &u but no supporter are online!',
            type: 'string',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spSupportUserIgnoreMessage',
            indent: 2,
            title: 'Message to ignored users [Variable &u = Username] (*)',
            placeholder: 'Sorry &u but you on the ignore list.',
            type: 'string',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }]
        }, {
            name: 'spMsgMode',
            title: 'Notification mode (*)',
            type: 'select',
            options: ['Poke', 'Chat'],
            conditions: [{
                field: 'spLanguage',
                value: 1
            }]
        },
        //------------------------------------------------------------------- {Module Config} ---------------------------------------------------------------------------------
        {
            name: 'spModule',
            title: 'Support++ module. Activate the modul with the Checkbox.',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        },

        //                         -> Ticket
        {
            name: 'spTicketActiv',
            indent: 2,
            title: '[TicketSystem] Would you like use a ticket system? (v2.0.1)',
            type: 'checkbox',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spTicketCommand',
            indent: 4,
            title: 'Command to send a ticket (e.g !ticket)',
            placeholder: '!t | !ticket | !tr ...',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTicketActiv',
                    value: true
                }
            ]
        }, {
            name: 'spTicketSendMsg',
            indent: 4,
            title: 'Ticket confirmation message [Variable &u = Username]',
            placeholder: 'Your ticket has been sent',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTicketActiv',
                    value: true
                }
            ]
        }, {
            name: 'spNewTicketMsg',
            indent: 4,
            title: 'Message when a supporter gets a new ticket [Variable &u = Username]',
            placeholder: 'New ticket from &u !',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTicketActiv',
                    value: true
                }
            ]
        },
        //                          Ticket  <-


        //                        -> Telegram

        {
            name: 'spTelegramActiv',
            indent: 2,
            title: '[TelegramNotification] Notification via Telegram? (v2.0.1)',
            type: 'checkbox',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spTelegramModeTicket',
            indent: 4,
            title: 'Ticket notification mode via Telegram',
            type: 'select',
            options: ['Always', 'When no supporter online', 'Never'],
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTelegramActiv',
                    value: true
                }
            ]
        }, {
            name: 'spTelegramModeSupport',
            indent: 4,
            title: 'Support notification mode via Telegram',
            type: 'select',
            options: ['Always', 'When no supporter online', 'Never'],
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTelegramActiv',
                    value: true
                }
            ]
        }, {
            name: 'spTelegramID',
            indent: 4,
            title: 'Telegram ChatId',
            placeholder: '123456789',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTelegramActiv',
                    value: true
                }
            ]
        }, {
            name: 'spTelegramToken',
            indent: 4,
            title: 'Telegram Bot token',
            placeholder: '987654321',
            type: 'password',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTelegramActiv',
                    value: true
                }
            ]
        }, {
            name: 'spTelegrammTextSupport',
            indent: 4,
            title: 'Support | Telegramm message [Variables: &u = username]',
            placeholder: 'Hello support team,\n\n User &u joined the supportroom and needs support.\n\n Help yould be appreciated!\n Thanks ;)',
            type: 'multiline',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTelegramActiv',
                    value: true
                }
            ]
        }, {
            name: 'spTelegrammTextTicket',
            indent: 4,
            title: 'Ticket | Telegramm message [Variables: &u = username | &msg = message]',
            placeholder: 'Hello supporter,\n\n new ticket:\nname: &u\nmessage: &msg\n\n Please answer the ticket, thanks ;)',
            type: 'multiline',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spTelegramActiv',
                    value: true
                }

            ]
        },

        //                        Telegram <-

        //                        -> Discord

        {
            name: 'spDiscordActiv',
            indent: 2,
            title: '[DiscordNotification] Notification via Discord? (v2.0.0)',
            type: 'checkbox',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spDiscordModeTicket',
            indent: 4,
            title: 'Ticket notification mode via Discord',
            type: 'select',
            options: ['Always', 'When no supporter online', 'Never'],
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spDiscordActiv',
                    value: true
                }
            ]
        }, {
            name: 'spDiscordModeSupport',
            indent: 4,
            title: 'Support notification mode via Discord',
            type: 'select',
            options: ['Always', 'When no supporter online', 'Never'],
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spDiscordActiv',
                    value: true
                }
            ]
        }, {
            name: 'spDiscordID',
            indent: 4,
            title: 'Discord ChatId',
            placeholder: '123456789',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spDiscordActiv',
                    value: true
                }
            ]
        }, {
            name: 'spDiscordToken',
            indent: 4,
            title: 'Discord Bot token',
            placeholder: '987654321',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spDiscordActiv',
                    value: true
                }
            ]
        }, {
            name: 'spDiscordTextSupport',
            indent: 4,
            title: 'Support | Discord message [Variables: &u = username]',
            placeholder: 'Hello support team,\n\n User &u joined the supportroom and needs support.\n\n Help yould be appreciated!\n Thanks ;)',
            type: 'multiline',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spDiscordActiv',
                    value: true
                }
            ]
        }, {
            name: 'spDiscordTextTicket',
            indent: 4,
            title: 'Ticket | Discord message [Variables: &u = username | &msg = message]',
            placeholder: 'Hello supporter,\n\n new ticket:\nname: &u\nmessage: &msg\n\n Please answer the ticket, thanks ;)',
            type: 'multiline',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spDiscordActiv',
                    value: true
                }

            ]
        },

        //                        Discord <-


        //                        -> ChannelEdit


        {
            name: 'spChannelEditActiv',
            indent: 2,
            title: '[ChannelEdit] Edit you Channel (v2.0.1)',
            type: 'checkbox',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spSupportChannelNameOnlineMsg',
            indent: 4,
            title: 'Channel name when support is open (!online)',
            placeholder: '[cspacer]Support [Online]',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spChannelEditActiv',
                    value: true
                }
            ]
        }, {
            name: 'spSupportChannelNameOnlinDescription',
            indent: 4,
            title: 'Channel description when support is open (!online)',
            placeholder: 'Support channel is open.',
            type: 'multiline',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spChannelEditActiv',
                    value: true
                }

            ]
        }, {
            name: 'spSupportChannelMaxClientsOnline',
            indent: 4,
            title: 'Change the maxClints when Online.',
            placeholder: '10',
            type: 'number',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spChannelEditActiv',
                    value: true
                }

            ]
        }, {
            name: 'spSupportChannelNameOfflineMsg',
            indent: 4,
            title: 'Channel name when support is closed (!offline)',
            placeholder: '[cspacer]Support [Offline]',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spChannelEditActiv',
                    value: true
                }
            ]
        }, {
            name: 'spSupportChannelNameOfflineDescription',
            indent: 4,
            title: 'Channel description when support is closed (!offline)',
            placeholder: 'Support channel is closed.',
            type: 'multiline',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spChannelEditActiv',
                    value: true
                }
            ]
        }, {
            name: 'spSupportChannelMaxClientsOffline',
            indent: 4,
            title: 'Change the maxClints when Offline.',
            placeholder: '0',
            type: 'number',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spChannelEditActiv',
                    value: true
                }

            ]
        }, {
            name: 'spSupportChannelNameChange',
            indent: 4,
            title: 'The channel shat should be renamed',
            type: 'channel',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spChannelEditActiv',
                    value: true
                }
            ]
        },




        //                        ChannelEdit <-

        //                        -> Queue

        {
            name: 'spQueueActiv',
            indent: 2,
            title: '[Queue] Play Music for waiting User... (v2.0.0)',
            type: 'checkbox',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spQueueTrack',
            indent: 4,
            title: 'Sound file: ',
            placeholder: 'Search for track...',
            type: 'track',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spQueueActiv',
                    value: true
                }
            ]
        }, {
            name: 'spQueueVolumen',
            indent: 4,
            title: 'Select the Volumen: ',
            placeholder: '60',
            type: 'number',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spQueueActiv',
                    value: true
                }
            ]
        }, {
            name: 'spQueueResume',
            indent: 4,
            title: 'Resume the last music after Queue track?',
            type: 'checkbox',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spQueueActiv',
                    value: true
                }
            ]
        },
        {
            name: 'spQueueMove',
            indent: 4,
            title: 'Move the Bot in the Support Channel?',
            type: 'checkbox',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spQueueActiv',
                    value: true
                }
            ]
        },


        //                        -> Queue

        //                        -> AntiFlood

        //Module Update ;)

        {
            name: 'spAntiFloodActiv',
            indent: 2,
            title: '[AntiFlood] AntiFlood Protection  (v0.0.9) BETA',
            type: 'checkbox',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spAntiFloodInfo',
            indent: 4,
            title: 'This Modul, protect you Ticket / Support Bot for AntiFlood. WARNING: This Script is in the BETA, please contact my of bug and problem.',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spAntiFloodActiv',
                    value: true
                }
            ]
        }, {
            name: 'spAntiFloodPointsReduce',
            indent: 4,
            title: 'Reduce points per minute',
            placeholder: '5',
            type: 'number',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spAntiFloodActiv',
                    value: true
                }
            ]
        }, {
            name: 'spAntiFloodPointsLimit',
            indent: 4,
            title: 'Points to lock the user',
            placeholder: '60',
            type: 'number',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spAntiFloodActiv',
                    value: true
                }
            ]
        }, {
            name: 'spAntiFloodPointsTicket',
            indent: 4,
            title: 'Points for each ticket',
            placeholder: '20',
            type: 'number',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spAntiFloodActiv',
                    value: true
                }
            ]
        }, {
            name: 'spAntiFloodPointsSupport',
            indent: 4,
            title: 'Points for each support request',
            placeholder: '20',
            type: 'number',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spAntiFloodActiv',
                    value: true
                }
            ]
        },

        //                         AntiFlood <-


        //                        -> Prefix

        {
            name: 'spPrefixActiv',
            indent: 2,
            title: '[Prefix] Change the default Prefix (z.B. Support |) (v2.0.0)',
            type: 'checkbox',
            conditions: [{
                field: 'spLanguage',
                value: 1
            }, ]
        }, {
            name: 'spPrefixTicket',
            indent: 4,
            title: 'Change the ticket prefix',
            placeholder: '[B]Ticket | [/B]',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spPrefixActiv',
                    value: true
                }
            ]
        }, {
            name: 'spPrefixSupport',
            indent: 4,
            title: 'Change the support prefix',
            placeholder: '[B]Support | [/B]',
            type: 'string',
            conditions: [{
                    field: 'spLanguage',
                    value: 1
                },
                {
                    field: 'spPrefixActiv',
                    value: true
                }
            ]
        },

        //                         Prefix <-

        {
            name: 'spCopyright',
            title: 'This Script is created by VerHext. This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Remove any Watermarks is deny.'
        },
    ],


}, function(sinusbot, config, info) {



    //Require module variables
    var event = require('event');
    var engine = require('engine');
    var backend = require('backend');
    var media = require('media');
    var audio = require('audio');
    var store = require('store');
    var dateFormat = require('dateformat');


    //function
    var startOk = true;
    if (typeof config.spSupportChannels == 'undefined') {
        startOk = false;
    }
    if (typeof config.spMsgMode == 'undefined') {
        startOk = false;
    }
    if (startOk) {
        engine.notify('Support++ is running!')
    } else {
        engine.notify('Support ++ | You must complete all required (*) fields ')
    }




    //In Version V3
    /*  function playTTS (text){
        media.playURL("http://www.voicerss.org/controls/speech.ashx?hl=de-de&src="+ encodeURIComponent(text)+ "&c=mp3")
      }
    */
    function sendTelegram(text) {
        if (config.spTelegramActiv) {
            sinusbot.http({

                url: "https://api.telegram.org/bot" + config.spTelegramToken + "/sendMessage?chat_id=" + config.spTelegramID + "&text=" + encodeURIComponent(text),
                timeout: 60000,
            });
            engine.log('TelegramNotification send...')
        }

    }


    function sendDiscord(text) {
        if (config.spDiscordActiv) {
            sinusbot.http({
                //This is an extern API (from VerHext). You would use your self bot? Please contackt me... <supportqallesverhext.de>
                url: "http://discordbot.api.allesverhext.de:3099/discord?&token=" + config.spDiscordToken + "&id=" + config.spDiscordID + "&msg=" + encodeURIComponent(text),
                timeout: 60000,
            });
            engine.log('DiscordNotification send...')
        }
    }


    //delDoubleGroups remove array -> objekt -> array
    function deleteDuplicates(arr) {
        var temp = {};
        for (var i = 1; i < arr.length; i++) temp[arr[i]] = true;
        var r = [];
        for (var k in temp) r.push(k);
        return r;
    }


    function getSupporter(groupArray) {
        var supporter = [];
        var i = 0;

        if (groupArray == "all") {
            config.spSupportChannels.forEach(function(spg) {
                backend.getClients().forEach(function(client) {
                    client.getServerGroups().forEach(function(group) {
                        spg.spSupporterId.forEach(function(group2) {
                            if (isAFK(client.getChannels()[0].id())) {
                                if (group.id() == group2) {
                                    i = i + 1;

                                    supporter[i] = client.id();
                                }
                            }
                        });
                    });

                });
            });
        } else {
            backend.getClients().forEach(function(client) {
                client.getServerGroups().forEach(function(group) {
                    groupArray.forEach(function(group2) {
                        if (isAFK(client.getChannels()[0].id())) {
                            if (group.id() == group2) {
                                i = i + 1;
                                supporter[i] = client.id();
                            }
                        }
                    });
                });

            });
        }

        return supporter;
    }

    //Check Ignore User
    function isIgnore(client) {

        var ignore = false;
        config.spSupportChannels.forEach(function(spg) {
            backend.getClientByID(client).getServerGroups().forEach(function(group) {
                config.spIgnoreId.forEach(function(group2) {
                    spg.spSupporterId.forEach(function(group3) {
                        if (group.id() == group2 || group.id() == group3) {
                            ignore = true;
                        }
                    });
                });
            });
        });
        return ignore;
    }

    // AFK Channel?

    function isAFK(id) {
        var afkChannels = config.spAfkChannels;
        if (afkChannels != undefined) {
            for (var i = 0; i < afkChannels.length; i++) {
                if (afkChannels[i].spAfkChannel == id) {
                    return false;
                }
            }
        }
        return true;
    }



    //--------------------------------------------------- {Prefix} -----------------------------------------------------------

    var prefixTicket;
    var prefixSupport;

    if (config.spPrefixActiv) {

        if (typeof config.spPrefixTicket == 'undefined') {
            prefixTicket = '[B]Ticket | [/B]';
        } else {
            prefixTicket = config.spPrefixTicket + ' ';
        }
        if (typeof config.spPrefixSupport == 'undefined') {
            prefixSupport = '[B]Support | [/B]';
        } else {
            prefixSupport = config.spPrefixSupport + ' ';
        }
    } else {
        prefixSupport = '[B]Support | [/B]';
        prefixTicket = '[B]Ticket | [/B]';
    }

    //--------------------------------------------------- {AntiFlood} -----------------------------------------------------------

    function AntiFlood(clientId, points) {
        if (config.spAntiFloodActiv) {

            var uid = backend.getClientByID(clientId).uid();
            var ds = store.get(uid);

            store.set(uid, ds + points)
        } else {
            return false;
        }
    }




    function isFlood(clientId, points) {

        var uid = backend.getClientByID(clientId).uid();
        var client = backend.getClientByID(clientId);
        var ds = store.get(uid);

        if (ds >= config.spAntiFloodPointsLimit) {
            client.chat('[color=#aa0000][b][Support++] This action is currently not possible because of spam protection. Try again in a few seconds.[/b][/color]');
            AntiFlood(clientId, points)
            return true;
        } else {
            AntiFlood(clientId, points)
            return false;
        }
    }
    setInterval(function() {
        store.getKeys().forEach(function(key) {
            var ds = store.get(key);
            if (ds <= 0) {
                store.unset(key);
            } else {
                store.set(key, ds - config.spAntiFloodPointsReduce)
            }
        });

    }, 60000);




    //--------------------------------------------------- {function clientMove event} -----------------------------------------------------------

    //MoveEvent -> User joint Support Channel
    event.on('clientMove', function(ev) {
        //Send Message (Supporter)
        function sendMessage(client, message) {
            if (config.spMsgMode == 0) {
                client.poke(prefixSupport + message.replace("&u", ev.client.name()));
            } else {
                client.chat(prefixSupport + message.replace("&u", ev.client.name()));
            }
        }




        //--------------------------------------------------- {Join Support Channel} -----------------------------------------------------------

        var channel;

        //Check is join Support Channel
        config.spSupportChannels.forEach(function(sp) {
            channel = ev.client.getChannels();
            if (channel[0].id() == sp.spSupportChannel) {
                //Check is user ignore?
                if (isFlood(ev.client.id(), config.spAntiFloodPointsSupport)) {} else {
                    if (isIgnore(ev.client.id())) {
                        sendMessage(ev.client, config.spSupportUserIgnoreMessage);
                    } else {

                        //Check Supporter Online?
                        if (!(getSupporter(sp.spSupporterId).length > 0)) {

                            if (config.spDiscordModeSupport == 1 || config.spDiscordModeSupport == 0) {
                                sendDiscord(config.spDiscordTextSupport.replace("&u", ev.client.name()));
                            }
                            if (config.spTelegramModeSupport == 1 || config.spTelegramModeSupport == 0) {
                                sendTelegram(config.spTelegrammTextSupport.replace("&u", ev.client.name()));
                            }

                            sendMessage(ev.client, config.spSupportUserNoMessage);
                        } else {
                            //Supporter is Online!

                            getSupporter(sp.spSupporterId).forEach(function(onlineSupporterID) {
                                //GetSupporter action
                                setTimeout(function() {
                                    sendMessage(backend.getClientByID(onlineSupporterID), sp.spSupportMessage);
                                }, 10);
                            });
                            //Send User Message
                            sendMessage(ev.client, sp.spSupportUserMessage)
                            if (config.spTelegramModeSupport == 0) {
                                sendTelegram(config.spTelegrammTextSupport.replace("&u", ev.client.name()));
                            }
                            if (config.spDiscordModeSupport == 0) {
                                sendDiscord(config.spDiscordTextSupport.replace("&u", ev.client.name()));
                            }
                            //playTTS(sp.spSupportUserMessage.replace("&u", ev.client.name()))
                            playQueuTrack(ev.client.getChannels()[0]);
                        }
                    }
                }
            }

        });
    });
    //--------------------------------------------------- {functionen Chat} -----------------------------------------------------------

    event.on('chat', function(ev) {


        if (ev.client.isSelf()) {
            return;
        }
        // Send Message (Supporter)
        function sendMessage(client, message, tr) {
            if (tr) {
                if (config.spMsgMode == 0) {
                    client.poke(prefixTicket + message.replace("&u", ev.client.name()));
                } else {
                    client.chat(prefixTicket + message.replace("&u", ev.client.name()));
                }
            } else {
                if (config.spMsgMode == 0) {
                    client.poke(prefixTicket + message);
                } else {
                    client.chat(prefixTicket + message);
                }
            }
        }
        //--------------------------------------------------- {Ticket System } -----------------------------------------------------------

        var discord = false;
        var discordTicket = config.spDiscordTextTicket;
        var telegram = false;
        var telegramTicket = config.spTelegrammTextTicket;

        function sendToNotificationModule() {
            if (telegram && config.spTelegramModeTicket == 0 || config.spTelegramModeTicket == 1) {
                sendTelegram(telegramTicket)
            }
            if (discord && config.spDiscordModeTicket == 0 || config.spDiscordModeTicket == 1) {
                sendDiscord(discordTicket)
            }
        }

        var ticket = "no Text!";

        //Ticket replace
        ticket = ev.text.replace(config.spTicketCommand, '');

        if (config.spDiscordActiv) {
            discordTicket = discordTicket.replace('&u', ev.client.name())
            discordTicket = discordTicket.replace('&msg', ticket)
            discord = true;
        }
        if (config.spTelegramActiv) {
            telegram = true;
            telegramTicket = telegramTicket.replace('&u', ev.client.name())
            telegramTicket = telegramTicket.replace('&msg', ticket)
        }




        if (ev.text.indexOf(config.spTicketCommand) != -1) {
            engine.log('Create Ticket');
            if (!(isFlood(ev.client.id(), config.spAntiFloodPointsSupport))) {
                if (!(isIgnore(ev.client.id()))) {
                    //send bestätigung Ticket
                    engine.log('Ticket message')
                    sendMessage(ev.client, config.spTicketSendMsg, true);
                    config.spSupportChannels.forEach(function(spg) {
                        backend.getClients().forEach(function(client) {
                            client.getServerGroups().forEach(function(group) {
                                spg.spSupporterId.forEach(function(group2) {
                                    if (isAFK(client.getChannels()[0].id())) {
                                        if (group.id() == group2) {
                                            if (config.spMsgMode == 0) {
                                                client.poke(prefixTicket + config.spNewTicketMsg.replace('&u', ev.client.name()));
                                            } else {
                                                client.chat(prefixTicket + config.spNewTicketMsg.replace('&u', ev.client.name()));
                                            }
                                            client.chat(prefixTicket + ticket)
                                        }
                                    }
                                });
                            });
                        });
                    });
                    sendToNotificationModule();
                } else {
                    if (config.spMsgMode == 0) {
                        ev.client.poke(config.spSupportUserIgnoreMessage.replace('&u', ev.client.name()));
                    } else {
                        ev.client.chat(config.spSupportUserIgnoreMessage.replace('&u', ev.client.name()));
                    }
                }
            }
        }


        if (ev.text == '!info' || ev.text == '!help') {
            ev.client.chat("This server uses VerHext's [url=https://forum.sinusbot.com/resources/support.229/]Support++[/url] script. Thanks for use!")
        }
        if (ev.text == '!version') {
            ev.client.chat("[Support++] [url=https://forum.sinusbot.com/resources/support.229/] 2.0.1[/url]")
        }


        //--------------------------------------------------- {ChannelEdit} -----------------------------------------------------------

        function issupporter(client) {
            var isSupporter = false;
            config.spSupportChannels.forEach(function(spg) {
                spg.spSupporterId.forEach(function(group2) {
                    backend.getClientByID(client).getServerGroups().forEach(function(group) {
                        if (group.id() == group2) {
                            isSupporter = true;
                        }
                    });
                });
            });
            return isSupporter;
        }

        if (ev.text == '!online' && config.spChannelEditActiv) {
            if (issupporter(ev.client.id())) {
                if (config.spLanguage == 0) {
                    ev.client.chat('[B]ChannelEdit | [/B] Der Support Channel ist nun geöffnet!');
                } else {
                    ev.client.chat('[B]ChannelEdit | [/B] The SupportChannel are now open!');
                }
                backend.getChannelByID(config.spSupportChannelNameChange).update({
                    name: config.spSupportChannelNameOnlineMsg,
                    maxClients: config.spSupportChannelMaxClientsOnline,
                    description: config.spSupportChannelNameOnlinDescription
                });
            }
        }

        
        if (ev.text == '!offline' && config.spChannelEditActiv) {
            if (issupporter(ev.client.id())) {
                if (config.spLanguage == 0) {
                    ev.client.chat('[B]ChannelEdit | [/B] Der Support Channel ist nun geschlossen.');
                } else {
                    ev.client.chat('[B]ChannelEdit | [/B] The SupportChannel are now closed!');
                }
                backend.getChannelByID(config.spSupportChannelNameChange).update({
                    name: config.spSupportChannelNameOfflineMsg,
                    maxClients: config.spSupportChannelMaxClientsOffline,
                    description: config.spSupportChannelNameOfflineDescription
                });
            }
        }

        //--------------------------------------------------- {ChannelEdit} -----------------------------------------------------------
    });

    //--------------------------------------------------- {Queue play track} -----------------------------------------------------------

    //For this module, I would like to thank TS3Index. I have been inspired by the "welcome sound" sript...

    var resumePlayback = false;
    var resumeTrack = false;
    var resumePlaylist = false;
    var resumePos = 0;
    var securejoin = true;
    var spQueueVolumen;
    var oldVolumen;
    var currentTrack;
    var posTrack;
    var queueChannel;
    var queueClient;


    function playQueuTrack(channelId) {

        if (config.spQueueActiv) {
            if (!(typeof config.spQueueTrack == 'undefined')) {
                if (typeof config.spQueueVolumen == 'undefined') {
                    spQueueVolumen = 70;
                } else {
                    spQueueVolumen = config.spQueueVolumen;
                }
                setTimeout(function() {
                    TrackBotJoin(channelId);
                }, 600);
                engine.log("Queue starting...");
                var currentTrack = media.getCurrentTrack();
                if (audio.isPlaying()) {
                    resumePlayback = true;
                    resumePos = audio.getTrackPosition();
                    resumeTrack = currentTrack;
                    resumePlaylist = media.getActivePlaylist() ? media.getActivePlaylist().id() : false;
                    media.playURL(config.spQueueTrack.url + '&callback=spQueue&copy=true');
                } else if (resumePlayback) {
                    securejoin = false;
                    media.playURL(config.spQueueTrack.url + '&callback=spQueue&copy=true');
                } else {
                    media.playURL(config.spQueueTrack.url);
                }
            } else {
                engine.log('No Track select!')
            }
        }
    }

    event.on('trackEnd', function(ev, callback) {
        engine.log('Queue trach finnish')
        if (callback == 'spQueue' && resumePlayback) {
            if (securejoin && resumeTrack) {
                engine.log("Resume last track: " + resumeTrack.Title());
                resumePlayback = false;
                TrackBotJoin(queueChannel);
                if (resumeTrack.Type() == 'url' && resumeTrack.Filename()) {
                    media.playURL(resumeTrack.Filename());
                } else if (resumeTrack.id()) {
                    audio.setMute(true);
                    if (resumePlaylist) media.getPlaylistByID(resumePlaylist).setActive();
                    media.playURL("track://" + resumeTrack.id());
                    audio.seek(resumePos);
                    audio.setMute(false);
                }
            }
            securejoin = true;
        }
    });

    function TrackBotJoin(channelId) {
        if (config.spQueueMove) {
            backend.getClients().forEach(function(client) {
                if (client.isSelf() == true) {
                    queueClient = client.id();
                    client.getChannels().forEach(function(channel) {
                        queueChannel = channel;
                        if (channel.id() == channelId.id()) {
                            engine.log('[Queue] Is alredy in Channel..');
                        } else {
                            client.moveTo(channelId);
                        }
                    });
                }
            });
        }
    }

    //--------------------------------------------------- {Queue play track} -----------------------------------------------------------
});
